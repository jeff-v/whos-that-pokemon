{"version":3,"sources":["initialPokedexContextState.ts","api/pokedexApi.ts","pikapika.mp3","components/guesser/guesser.tsx","components/previous-guesses.tsx","components/game-container.tsx","components/pokedex-entry.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialPokedexState","abilities","baseExperience","forms","game_indices","height","NaN","held_items","id","is_default","location_area_encounters","moves","name","order","past_types","species","url","sprites","front_default","front_shiny","back_default","back_shiny","other","dream_world","front_female","versions","stats","types","weight","pokedexApi","setPokemon","setError","setPokedexState","pokemonNumber","Math","floor","random","toString","axios","get","then","res","data","sprite","prevState","number","catch","err","console","error","Guesser","setSuccess","hardMode","useState","guess","setGuess","imageAnimation","setImageAnimation","checkGuess","toLowerCase","setTimeout","className","value","onChange","event","target","onKeyDown","key","undefined","onClick","alt","src","memo","pokemon","previousPokemonJsx","map","singlePokemon","index","to","capitalCase","nanoid","filter","length","GameContainer","useContext","PokedexContext","success","currentPokemon","setCurrentPokemon","pikachuNoise","useMemo","Audio","pikaPika","successClasses","setSuccessClasses","useEffect","log","play","finally","data-testid","PokedexEntry","pokedexState","positionInPreviousPokemon","useParams","parseInt","type","pastType","form","stat","base_stat","effort","ability","slot","is_hidden","move","createContext","App","initialPokedexContextState","Provider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ea6099a.chunk.js","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\nimport PokemonEntry from './types/PokemonEntry';\n\nexport interface PokedexContextParams {\n  pokedexState: PokemonEntry[];\n  setPokedexState: Dispatch<SetStateAction<PokemonEntry[]>>;\n}\n\nconst initialPokedexState: PokemonEntry[] = [\n  {\n    abilities: [],\n    baseExperience: 0,\n    forms: [],\n    game_indices: [],\n    height: NaN,\n    held_items: [],\n    id: 0,\n    is_default: false,\n    location_area_encounters: '',\n    moves: [],\n    name: '',\n    order: NaN,\n    past_types: [],\n    species: {\n      name: '',\n      url: '',\n    },\n    sprites: {\n      front_default: '',\n      front_shiny: '',\n      back_default: '',\n      back_shiny: '',\n      other: {\n        dream_world: {\n          front_default: '',\n          front_female: '',\n        },\n        'official-artwork': {\n          front_default: '',\n        },\n      },\n      versions: {},\n    },\n    stats: [],\n    types: [],\n    weight: NaN,\n  },\n];\n\nexport default initialPokedexState;\n","import axios from 'axios';\nimport { Dispatch, SetStateAction } from 'react';\nimport { Pokemon } from '../components/game-container';\nimport PokemonEntry from '../types/PokemonEntry';\n\n// the total length returned by the API is ~1100 but 898 is the highest I can get results on for some reason\nconst generatePokemonNumber = () => Math.floor(Math.random() * 898).toString();\n\ninterface PokedexApi {\n  setPokemon: Dispatch<SetStateAction<Pokemon[]>>;\n  setError: (error: boolean) => void;\n  setPokedexState: Dispatch<SetStateAction<PokemonEntry[]>>;\n}\n\nexport default function pokedexApi({\n  setPokemon,\n  setError,\n  setPokedexState,\n}: PokedexApi) {\n  const pokemonNumber = generatePokemonNumber();\n\n  return axios\n    .get<PokemonEntry>(`https://pokeapi.co/api/v2/pokemon/${pokemonNumber}`)\n    .then((res) => {\n      const {\n        sprites: { front_default: sprite },\n        name,\n      } = res.data;\n      setPokemon((prevState) => [\n        ...prevState,\n        { sprite, name, number: pokemonNumber },\n      ]);\n      setPokedexState((prevState) => {\n        if (prevState[0].id === 0) {\n          return [res.data];\n        } else {\n          return [...prevState, res.data];\n        }\n      });\n    })\n    .catch((err) => {\n      console.error(err);\n      setError(true);\n    });\n}\n","export default __webpack_public_path__ + \"static/media/pikapika.ac0cde3d.mp3\";","import React, { useState } from 'react';\n\ninterface GameContainerProps {\n  sprite: string;\n  name: string;\n  setSuccess: (success: boolean) => void;\n  hardMode?: boolean;\n}\n\nexport default function Guesser({\n  sprite,\n  name,\n  setSuccess,\n  hardMode,\n}: GameContainerProps) {\n  const [guess, setGuess] = useState<string>('');\n  const [imageAnimation, setImageAnimation] = useState<string>('');\n\n  function checkGuess() {\n    if (guess.toLowerCase() === name.toLowerCase()) {\n      setSuccess(true);\n      setGuess('');\n    } else {\n      setSuccess(false);\n      setImageAnimation('animate-shake');\n      setTimeout(() => setImageAnimation(''), 1000);\n    }\n  }\n\n  return (\n    <div className='flex items-center h-auto mt-2'>\n      <div className='flex flex-col mr-2'>\n        <input\n          className='border-2 border-black rounded-md mt-5 text-center mb-5'\n          value={guess}\n          onChange={(event) => setGuess(event.target.value)}\n          onKeyDown={(event) =>\n            event.key === 'Enter' ? checkGuess() : undefined\n          }\n        />\n        <button\n          className='font-bold rounded-md bg-gray-200 p-1'\n          onClick={checkGuess}\n        >\n          Enter guess!\n        </button>\n      </div>\n      <img\n        className={`${imageAnimation} ${\n          hardMode ? 'filter saturate-0 contrast-0' : ''\n        }`}\n        alt='sprite'\n        src={sprite}\n      />\n    </div>\n  );\n}\n","import React, { memo } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Pokemon } from './game-container';\nimport { capitalCase } from 'change-case';\nimport { Link } from 'react-router-dom';\n\ninterface PreviousGuessesProps {\n  pokemon: Pokemon[];\n}\n\nexport default memo(function PreviousGuesses({\n  pokemon,\n}: PreviousGuessesProps) {\n  const previousPokemonJsx = pokemon\n    .map((singlePokemon, index) => (\n      <div key={nanoid()} className='flex flex-col'>\n        <Link to={`/pokedex/${index}`}>\n          <img\n            alt={`previous pokemon sprite ${index + 1}`}\n            src={singlePokemon.sprite}\n          />\n          <div className='font-extrabold'>\n            {capitalCase(singlePokemon.name)}\n          </div>\n        </Link>\n      </div>\n    ))\n    .filter((singlePokemon, index) => index !== pokemon.length - 1);\n\n  if (pokemon.length === 0) {\n    return <></>;\n  }\n\n  return <>{previousPokemonJsx}</>;\n});\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport { useState } from 'react';\nimport pokedexApi from '../api/pokedexApi';\nimport { PokedexContext } from '../App';\nimport pikaPika from '../pikapika.mp3';\nimport Guesser from './guesser/guesser';\nimport PreviousGuesses from './previous-guesses';\n\nexport interface Pokemon {\n  sprite: string;\n  name: string;\n  number: string;\n}\n\ninterface GameContainerProps {\n  hardMode?: boolean;\n}\n\nexport default function GameContainer({ hardMode }: GameContainerProps) {\n  const { setPokedexState } = useContext(PokedexContext);\n  const [pokemon, setPokemon] = useState<Pokemon[]>([]);\n  const [success, setSuccess] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [currentPokemon, setCurrentPokemon] = useState<Pokemon>();\n  // this element gets loaded over and over again if it's a state, so I'm memoizing it for the time being\n  const pikachuNoise = useMemo<HTMLAudioElement>(() => new Audio(pikaPika), []);\n  const [successClasses, setSuccessClasses] = useState<string>('');\n\n  useEffect(() => {\n    console.log(pokemon[pokemon.length - 1]?.name);\n    setCurrentPokemon(pokemon[pokemon.length - 1]);\n  }, [pokemon]);\n\n  useEffect(() => {\n    if (success) {\n      setSuccessClasses('text-green-600 animate-bounce absolute inset-0');\n      pokedexApi({ setPokemon, setError, setPokedexState });\n      pikachuNoise\n        .play()\n        .catch((err) => console.error(err))\n        .finally(() => setSuccess(false));\n    }\n  }, [pikachuNoise, setPokedexState, success]);\n\n  if (error) {\n    return (\n      <div className='font-bold'>\n        Oh no, Team Rocket messed up our GET request!\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {success && <span className={`${successClasses}`}>You did it!</span>}\n      {pokemon.length > 1 && (\n        <div className='bg-gray-100 min-h-15 w-screen flex flex-wrap flex-row justify-center content-center items-center'>\n          <button\n            className='bg-blue-500 h-20 rounded-lg align-text-center w-40 p-2 text-white font-bold mr-5'\n            onClick={() => setPokemon([])}\n          >\n            Clear Previous Guesses\n          </button>\n          <PreviousGuesses pokemon={pokemon} />\n        </div>\n      )}\n      <div className='h-full mt-8 w-full flex flex-col items-center'>\n        <button\n          className='rounded-md border-gray-500 cursor-auto bg-red-700 text-white p-4'\n          data-testid='get-new-pokemon'\n          onClick={() => pokedexApi({ setPokemon, setError, setPokedexState })}\n        >\n          Get me a pokemon!\n        </button>\n        {pokemon[0]?.sprite && (\n          <Guesser\n            sprite={currentPokemon?.sprite as string}\n            name={currentPokemon?.name as string}\n            setSuccess={setSuccess}\n            hardMode={hardMode}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { useContext } from 'react';\nimport { nanoid } from 'nanoid';\nimport { PokedexContext } from '../App';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { capitalCase } from 'change-case';\n\ninterface Params {\n  positionInPreviousPokemon: string;\n}\n\nexport default function PokedexEntry() {\n  const { pokedexState } = useContext(PokedexContext);\n\n  const { positionInPreviousPokemon } = useParams<Params>();\n\n  if (pokedexState[0].id === 0) {\n    return <Redirect to='/whos-that-pokemon' />;\n  }\n\n  const {\n    sprites,\n    name,\n    abilities,\n    baseExperience,\n    height,\n    id,\n    forms,\n    moves,\n    order,\n    past_types,\n    stats,\n    types,\n    weight,\n  } = pokedexState[parseInt(positionInPreviousPokemon, 10)];\n\n  return (\n    <div className='flex items-start m-10'>\n      <img\n        className='w-1/4 flex-grow'\n        alt='sprite'\n        src={sprites.front_default}\n      />\n      <div className='pokemon-info flex flex-col items-start ml-5 flex-grow'>\n        <div className='font-black text-xl'>{capitalCase(name)}</div>\n        <div>\n          <span className='font-extrabold'>ID:</span> {id}\n        </div>\n        <div>\n          <span className='font-extrabold'>Height:</span> {height}\n        </div>\n        <div>\n          <span className='font-extrabold'>Weight:</span> {weight}\n        </div>\n        <div className='flex'>\n          <span className='font-extrabold'>Type:</span>\n          {types.map((type) => (\n            <div className='flex flex-col ml-1 mr-1' key={nanoid()}>\n              {capitalCase(type.type.name)}\n            </div>\n          ))}\n        </div>\n        {past_types.length > 0 && (\n          <div>\n            <span className='font-extrabold'>Past Types:</span>\n            {past_types.map((pastType) =>\n              pastType.types.map((type) => (\n                <div key={nanoid()}>{capitalCase(type.type.name)}</div>\n              ))\n            )}\n          </div>\n        )}\n        <div className='flex'>\n          <span className='font-extrabold'>Forms:</span>\n          {forms.map((form) => (\n            <div className='ml-1 mr-1' key={nanoid()}>\n              {capitalCase(form.name)}\n            </div>\n          ))}\n        </div>\n        <div>\n          <span className='font-extrabold'>Order:</span> {order}\n        </div>\n        {baseExperience && <div>Base Experience: {baseExperience}</div>}\n        <div className='flex items-start justify-evenly'>\n          <span className='font-extrabold'>Stats:</span>\n          {stats.map((stat) => (\n            <div\n              className='flex flex-col flex-wrap mr-10 ml-1 items-start'\n              key={nanoid()}\n            >\n              <div className='whitespace-nowrap'>\n                <span className='font-semibold'>Name:</span>{' '}\n                {capitalCase(stat.stat.name)}\n              </div>\n              <div className='whitespace-nowrap'>\n                <span className='font-semibold'>Base Stat:</span>\n                <span>{stat.base_stat}</span>\n              </div>\n              <div>\n                <span className='font-semibold'>Effort:</span> {stat.effort}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className='flex items-start'>\n          <span className='font-extrabold'>Abilities:</span>\n          <div className='flex'>\n            {abilities.map((ability) => (\n              <div\n                className='flex flex-col ml-1 mr-1 items-start'\n                key={nanoid()}\n              >\n                <div>\n                  <span className='font-semibold'>Name:</span>\n                  {capitalCase(ability.ability.name)}\n                </div>\n                <div>\n                  <span className='font-semibold'>Slot:</span> {ability.slot}\n                </div>\n                {ability.is_hidden && (\n                  <div className='font-bold'>Hidden ability</div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className='flex flex-col items-start flex-wrap justify-between'>\n          <div>\n            <span className='font-extrabold'>Moves:</span>\n          </div>\n          <ul className='flex flex-col items-start'>\n            {moves.map((move) => (\n              <li className='ml-1 mr-1 flex flex-col' key={nanoid()}>\n                {capitalCase(move.move.name)}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { createContext, useState } from 'react';\nimport './App.css';\nimport { Link, Switch, Route } from 'react-router-dom';\nimport PokemonEntry from './types/PokemonEntry';\nimport initialPokedexContextState, {\n  PokedexContextParams,\n} from './initialPokedexContextState';\nimport GameContainer from './components/game-container';\nimport PokedexEntry from './components/pokedex-entry';\n\nexport const PokedexContext = createContext<PokedexContextParams>(\n  {} as PokedexContextParams\n);\n\nexport default function App() {\n  const [pokedexState, setPokedexState] = useState<PokemonEntry[]>(\n    initialPokedexContextState\n  );\n\n  return (\n    <div className='App h-screen'>\n      <div className='nav flex w-screen justify-center items-center space-x-7 bg-blue-500 h-20 text-white text-2xl mb-30'>\n        <Link to='/whos-that-pokemon'>Easy mode</Link>\n        <Link to='/whos-that-pokemon-hard-mode'>Hard mode</Link>\n      </div>\n      <div className='flex items-center flex-col h-full'>\n        <PokedexContext.Provider value={{ pokedexState, setPokedexState }}>\n          <Switch>\n            <Route exact path={['/', '/whos-that-pokemon']}>\n              <GameContainer />\n            </Route>\n            <Route exact path='/whos-that-pokemon-hard-mode'>\n              <GameContainer hardMode />\n            </Route>\n            <Route path='/pokedex/:positionInPreviousPokemon'>\n              <PokedexEntry />\n            </Route>\n          </Switch>\n        </PokedexContext.Provider>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}